/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import entity.Order;
import entity.OrderDetail;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.LineSeparator;
import dao.Order_DAO;
import database.ConnectDB;
import java.awt.Desktop;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.stream.Stream;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Sides;

/**
 *
 * @author thanhcanhit
 */
public final class PreviewOrder_GUI extends javax.swing.JFrame {

    private final Order order;
    public static final String FONT = "resources/fonts/arial-unicode-ms.ttf";
    private static final String FILE_PATH = "lastOrder.pdf";

    /**
     * Creates new form PreviewOrder_GUI
     *
     * @param order
     * @param width
     */
    enum TextAlign {
        LEFT, CENTER, RIGHT;
    }

    public PreviewOrder_GUI(Order order) {
        this.order = order;
        initComponents();
        toPDFFile();
        try {
            printFile();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String getVND(double number) {
        return utilities.FormatNumber.toVND(number);
    }

    private void addTableHeader(PdfPTable table, Font font) {
        Stream.of("VAT", "Giá", "Số lượng", "Tổng tiền")
                .forEach(columnTitle -> {
                    PdfPCell header = new PdfPCell();
                    header.setBackgroundColor(BaseColor.WHITE);
                    header.setBorderWidth(1);
                    header.setPhrase(new Phrase(columnTitle, font));
                    header.setPadding(4);
                    table.addCell(header);
                });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scr_display = new javax.swing.JScrollPane();
        txa_orderContent = new javax.swing.JTextArea();
        pnl_control = new javax.swing.JPanel();
        btn_close = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setMaximumSize(new java.awt.Dimension(435, 800));
        setMinimumSize(new java.awt.Dimension(435, 800));
        setPreferredSize(new java.awt.Dimension(435, 800));

        scr_display.setToolTipText("");
        scr_display.setMaximumSize(new java.awt.Dimension(450, 600));

        txa_orderContent.setColumns(20);
        txa_orderContent.setFont(txa_orderContent.getFont());
        txa_orderContent.setRows(5);
        txa_orderContent.setTabSize(4);
        scr_display.setViewportView(txa_orderContent);

        getContentPane().add(scr_display, java.awt.BorderLayout.CENTER);

        pnl_control.setMinimumSize(new java.awt.Dimension(78, 100));
        pnl_control.setLayout(new java.awt.GridLayout(1, 0));

        btn_close.setText("Xác nhận");
        btn_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeActionPerformed(evt);
            }
        });
        pnl_control.add(btn_close);

        getContentPane().add(pnl_control, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void printFile() throws IOException, PrintException {
        DocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PAGEABLE;
        PrintRequestAttributeSet patts = new HashPrintRequestAttributeSet();
        patts.add(Sides.DUPLEX);
        PrintService[] ps = PrintServiceLookup.lookupPrintServices(flavor, patts);
        if (ps.length == 0) {
            throw new IllegalStateException("No Printer found");
        }
        System.out.println("Available printers: " + Arrays.asList(ps));

        PrintService myService = null;
        for (PrintService printService : ps) {
            if (printService.getName().equals("Your printer name")) {
                myService = printService;
                break;
            }
        }

        if (myService == null) {
            throw new IllegalStateException("Printer not found");
        }

        try (FileInputStream fis = new FileInputStream(FILE_PATH)) {
            Doc pdfDoc = new SimpleDoc(fis, DocFlavor.INPUT_STREAM.AUTOSENSE, null);
            DocPrintJob printJob = myService.createPrintJob();
            printJob.print(pdfDoc, new HashPrintRequestAttributeSet());
        }
    }

    private void toPDFFile() {
        try {
            //Create Document instance.
            Document document = new Document();

            //Create OutputStream instance.
            OutputStream outputStream
                    = new FileOutputStream(new File(FILE_PATH));

            //Create PDFWriter instance.
            PdfWriter writer = PdfWriter.getInstance(document, outputStream);
            writer.setLanguage("VN");

            //Open the document.
            document.open();
            BaseFont bf = BaseFont.createFont(FONT, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
//            Header
            Font headingFont = new Font(bf, 14, Font.BOLD);
            Font subHeadingFont = new Font(bf, 12, Font.BOLD);
            Font font = new Font(bf, 12);
            Font fontStrikeThrou = new Font(bf, 12, Font.STRIKETHRU);
            LineSeparator separator = new LineSeparator(font);

            Paragraph sofware = new Paragraph("OMEGA BOOK", headingFont);
            Paragraph desc = new Paragraph("Hãy xem sách như là một loại Vitamin", font);
            sofware.setAlignment(TextAlign.CENTER.ordinal());
            desc.setAlignment(TextAlign.CENTER.ordinal());
            document.add(sofware);
            document.add(desc);
            document.add(separator);

//            Content
            Paragraph orderTitle = new Paragraph("HÓA ĐƠN THANH TOÁN", subHeadingFont);
            orderTitle.setAlignment(TextAlign.CENTER.ordinal());
            document.add(orderTitle);
            document.add(separator);

//            Order info
            document.add(new Paragraph(String.format("Số hóa đơn:  %s", order.getOrderID()), font));
            document.add(new Paragraph(String.format("Ngày tạo:  %s", order.getOrderAt()), font));
            document.add(new Paragraph(String.format("Nhân viên:  %s", order.getEmployee().getName()), font));
            document.add(new Paragraph(String.format("Khách hàng:  %s", order.getCustomer().getName()), font));
            document.add(separator);

//          Order detail  
            PdfPTable table = new PdfPTable(4);
            table.setSpacingBefore(20);
            table.setWidthPercentage(100);
            addTableHeader(table, subHeadingFont);

            int index = 0;
            for (OrderDetail detail : order.getOrderDetail()) {
                PdfPCell cell = new PdfPCell(new Phrase(String.format("%d. %s", ++index, detail.getProduct().getName()), font));
                cell.setColspan(4);

                table.addCell(new PdfPCell(cell));
                table.addCell(new PdfPCell(new Phrase(String.valueOf(detail.getVAT()), font)));

                boolean isHasDiscout = detail.getSeasonalDiscount() != 0;
                PdfPCell priceCell = new PdfPCell(new Phrase(getVND(detail.getPrice()), font));
                if (isHasDiscout) {
                    double pricePerItemAfterDiscount = detail.getPrice() - detail.getSeasonalDiscount() / detail.getQuantity();

                    priceCell.addElement(new Phrase(getVND(detail.getPrice()), fontStrikeThrou));
                    priceCell.addElement(new Chunk(getVND(pricePerItemAfterDiscount), font));
                }
                table.addCell(priceCell);

                table.addCell(new PdfPCell(new Phrase(String.valueOf(detail.getQuantity()), font)));
                table.addCell(new PdfPCell(new Phrase(getVND(detail.getLineTotal()), font)));

            }

            document.add(table);

//            Order footer    
            document.add(new Paragraph("Tổng tiền: " + getVND(order.getSubTotal()), font));
            document.add(new Paragraph("Chiết khấu đơn: " + getVND(order.getSubTotal() - order.getTotalDue()), font));
            document.add(new Paragraph("Thanh toán: " + getVND(order.getTotalDue()), subHeadingFont));
            document.add(separator);

            boolean isATMPayment = order.isPayment();
            document.add(new Paragraph("Hình thức thanh toán: " + (isATMPayment ? "ATM" : "Tiền mặt"), font));
            if (!isATMPayment) {
                document.add(new Paragraph("Tiền khách đưa: " + getVND(order.getMoneyGiven()), font));
                document.add(new Paragraph("Tiền trả lại: " + getVND(order.getMoneyGiven() - order.getTotalDue()), font));
            }

            //Close document and outputStream.
            document.close();
            outputStream.close();

            System.out.println("Pdf created successfully.");
            Desktop d = Desktop.getDesktop();
            d.open(new File(FILE_PATH));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void btn_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeActionPerformed
        this.dispose();
    }//GEN-LAST:event_btn_closeActionPerformed
    public static void main(String[] args) {
        try {
            ConnectDB.connect();
            Order order = new Order_DAO().getOne("HD151120230023");
            new PreviewOrder_GUI(order).dispose();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_close;
    private javax.swing.JPanel pnl_control;
    private javax.swing.JScrollPane scr_display;
    private javax.swing.JTextArea txa_orderContent;
    // End of variables declaration//GEN-END:variables
}
